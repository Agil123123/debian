#!/usr/bin/python

# Copyright (C) 2013-2014  Stefano Zacchiroli <zack@upsilon.cc>
#
# This file is part of Debsources.
#
# Debsources is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import logging
import sqlalchemy
import string
import sys

import bininit

import mainlib
import updater


def main():
    cmdline = argparse.ArgumentParser(description='Debsources updater')
    cmdline.add_argument('--config', '-c', dest='conffile',
                         default=bininit.DEFAULT_CONFFILE,
                         help='alternate configuration file')
    cmdline.add_argument('--dry-run', '-d', dest='dry',
                         action='store_true',
                         help='enable dry run mode')
    cmdline.add_argument('--pass', '-p',
                         metavar='PASS',
                         action='append',
                         help='only perform a specific update pass (one of: db, fs, hooks, hooks.db, hooks.fs). By default all passes are enabled; the special value "none" disables all passes. Can be specified multiple times. Warning: you will mess up update logic, use at your own risk.',
                         dest='passes')
    cmdline.add_argument('--trigger', '-t',
                         metavar='EVENT/HOOK',
                         action='append',
                         help='force trigger of (Python) HOOK for EVENT. By default all registered hooks are triggered for all changed packages. Event is one of: %s. Hook is one of the available hooks. Can be specified multiple times. Warning: if not used with "--pass none" it might lead to multiple execution of the same hook. E.g.: -t add-package/checksums' % string.join(updater.KNOWN_EVENTS, ', '),
                         dest='force_triggers')
    cmdline.add_argument('--verbose', '-v',
                         action='count',
                         help='increase console verbosity')
    cmdline.add_argument('--dburi', '-u', dest='dburi',
                         help='database URI, e.g. postgresql:///mydbname. Override configuration file setting "db_uri"')
    cmdline.add_argument('--single-transaction', dest='single_transaction',
                         choices=['yes', 'no'],
                         help='use a single big DB transaction, instead of smaller per-package transactions (default: yes)')
    args = cmdline.parse_args()

    conf = mainlib.load_configuration(args.conffile)
    # override configuration from cmdline args
    if args.passes:
        if 'none' in args.passes:
            conf['passes'] = set()
        else:
            conf['passes'] = set(args.passes)
    if args.force_triggers:
        conf['force_triggers'] = []
        for trigger in args.force_triggers:
            (event, hook) = trigger.split('/')
            conf['force_triggers'].append((event, hook))
    if args.dry:
        conf['dry_run'] = True
    if args.dburi:
        conf['db_uri'] = args.dburi
    if args.single_transaction:
        conf['single_transaction'] = (args.single_transaction == 'yes')

    mainlib.init_logging(conf, mainlib.log_level_of_verbosity(args.verbose))
    logging.debug('loaded configuration from %s' % conf['conffile'])
    (observers, _file_exts)  = mainlib.load_hooks(conf)

    if conf['dry_run']:
        logging.warn('note: DRY RUN mode is enabled')
    if conf['passes'] != set(mainlib.DEFAULT_CONFIG['passes'].split()):
        logging.warn('only doing passes: %s' % list(conf['passes']))
    if conf['force_triggers']:
        logging.warn('forcing triggers: %s' % conf['force_triggers'])

    try:
        db = sqlalchemy.create_engine(conf['db_uri'])
        Session = sqlalchemy.orm.sessionmaker()
        if conf['single_transaction']:
            session = Session(bind=db, autocommit=False)
            updater.update(conf, session, observers)
            session.commit()
        else:
            session = Session(bind=db, autocommit=True)
            updater.update(conf, session, observers)
    except SystemExit:	# exit as requested
        raise
    except:	# store trace in log, then exit
        logging.exception('unhandled exception. Abort')
        sys.exit(2)


if __name__ == '__main__':
    main()
