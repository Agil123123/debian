#!/usr/bin/python

# Copyright (C) 2013  Matthieu Caneill <matthieu.caneill@gmail.com>
#               2013  Stefano Zacchiroli <zack@upsilon.cc>
#
# This file is part of Debsources.
#
# Debsources is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import argparse
import sys, os
import time

pydir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
                     'python')
sys.path.insert(0, pydir)

from dbutils import sources2db

if __name__ == "__main__":
    start_time = time.time()
    parser = argparse.ArgumentParser(description="Updates a SQLite base from \
    a sources.txt file")
    parser.add_argument("sources",
                        help="absolute or relative path to the sources.txt file")
    parser.add_argument("sqlite_file",
                        help="absolute or relative path to the sqlite file")
    #parser.add_argument("--drop",
    #                    help="drops the database before", action="store_true")
    parser.add_argument("--verbose", action="store_true",
                        help="verbose logging (default: be quiet)")
    args = parser.parse_args()

    if args.sqlite_file[0] != '/': # relatve path
        url = os.path.abspath(args.sqlite_file)
    else:
        url = args.sqlite_file
    url = "sqlite:///" + url

    #os.environ['PYTHONINSPECT'] = 'True'

    sources2db(args.sources, url, drop=True, verbose=args.verbose)
    if args.verbose:
        print("\n")
        print("Execution time: %f s" % (time.time() - start_time))
