#!/bin/bash

# Copyright (C) 2011-2013  Stefano Zacchiroli <zack@upsilon.cc>
#
# This file is part of Debsources.
#
# Debsources is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# List information about source package found in a given debsources instance
#
# Output format: "PACKAGE\tVERSION\tAREA\tDSC\tDEST\n"
#
# - PACKAGE is the source package name
# - VERSION is the source version
# - AREA is the archive area of origin, i.e. one of main, contrib, non-free
# - DSC is the absolute path to the package .dsc in the source mirror.  DSC can
#   have the special value "NONE" for source packages that exist in the local
#   debsources instance, but are no longer part of the local source mirror
#   (i.e. disappeared packages not yet expired).
# - DEST is the absolute path to the package unpacking directory

# Depends: dctrl-tools

root="/srv/debsources"
source "$root/etc/config.sh"
source "$root/bin/lib.sh"

expire_args=""
if [ "$expire_days" -gt 0 ] ; then
    expire_args="-ctime -${expire_days}"
fi

parse_dsc() {
    files_done="no"
    dsc="NONE"
    while [ "$files_done" = "no" ] ; do
        read hash size file        # line(s) "40bf5c1792a2a2555f2fc6edd2314005 1085 hello_1.2-3.dsc
        if [ -z "$hash" ] ; then   # line "\n"
            files_done="yes"
        elif [ "${file: -3:3}" = "dsc" ] ; then
            dsc="$mirror_dir/$directory/$file"
        fi
    done
}

emit() {
    echo -e "$package\\t$version\\t$area\\t$dsc\\t$dest"
}

# list source packages available from the local mirror. Some of it might have
# already been extracted in debsources dir, some might still need to
list_mirror() {
    # find "$mirror_dir/dists/unstable/contrib" -type f -name Sources.gz |
    src_indexes=$(find "$mirror_dir/dists/" -type f -name Sources.gz)

    zcat $src_indexes | \
    grep-dctrl -s Package,Version,Directory,Files '' - | \
    {
	while read _key package ; do   # line "Package: foo\n"
            read _key version          # line "Version: 1.2-3\n"
            read _key directory        # line "Directory: pool/main/h/hello\n"
            read _key                  # line "Files:\n"
            parse_dsc

            dest="$sources_dir/${directory#*/}/$version"
	    area="${directory#*/}"
	    area="${area%%/*}"

	    emit
	done
    }
}

# list source packages available in the local debsources dir, via extractions
# done in the past, excluding expired entries
list_debsources() {
    local mirror_list="$1"
    find "$sources_dir" -mindepth 4 -maxdepth 4 -type d $expire_args | \
    while read path ; do	# line "/srv/debsources/sources/contrib/s/sauerbraten/0.0.20100728.dfsg+repack-3"
	if grep -q "[[:blank:]]${path}\$" "$mirror_list" ; then
	    # source package already listed as part of the local mirror, skip
	    continue
	fi

	# ASSUMPTION: $sources_dir comes with no trailing slash
	local_dir=${path#$sources_dir/}	# "contrib/s/sauerbraten/0.0.20100728.dfsg+repack-3"

	package=$(echo $local_dir | cut -f 3 -d/)
	version=$(echo $local_dir | cut -f 4 -d/)
	area=$(echo $local_dir | cut -f 1 -d/)
	dsc="NONE"
	dest="$path"

	emit
    done
}

list() {
    list_m=$(mktemp --tmpdir debsources.XXXXXXXXXX)
    list_d=$(mktemp --tmpdir debsources.XXXXXXXXXX)
    trap "rm -f $list_m $list_d" EXIT
    list_mirror > $list_m
    list_debsources $list_m > $list_d
    cat $list_m $list_d | sort -u
}

list
