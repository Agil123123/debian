#!/usr/bin/python

import bininit

import argparse
import logging
import mainlib
import os
import sys

from sqlalchemy import create_engine, bindparam, Integer, LargeBinary, String
from sqlalchemy.sql import text as sql_query

import fs_storage
from plugins.hook_ctags import parse_ctags

METADATA_SUFFIX = '.ctags'
METADATA_SUFFIX_LEN = len(METADATA_SUFFIX)

BINDPARAMS = [
    bindparam('path', type_=LargeBinary),
]

PACKAGE_ID_Q = sql_query("""
    SELECT versions.id
    FROM versions, packages
    WHERE versions.package_id = packages.id
    AND versions.version = :v
    AND packages.name = :p
    """)

CTAGS_EXIST_Q = sql_query("""
    SELECT 1
    FROM ctags
    WHERE package_id = :v
    LIMIT 1
    """)

INSERT_CTAGS_Q = sql_query("""
    INSERT INTO ctags (package_id, tag, path, line, kind, language)
    VALUES (:package_id, :tag, :path, :line, :kind, :language)
    """,
    bindparams = BINDPARAMS)

def insert_ctags(conn, ctagsfile):
    steps = ctagsfile.split('/')
    package = steps[-2]
    version = steps[-1][:-METADATA_SUFFIX_LEN]
    logging.debug('package %s/%s' % (package, version))

    package_id = conn.execute(PACKAGE_ID_Q, v=version, p=package).first()
    if not package_id:
        logging.warn('skipping %s/%s (does not exist in DB)' % (package, version))
        return

    has_ctags = conn.execute(CTAGS_EXIST_Q, v=package_id[0]).first()
    if has_ctags:
        logging.warn('skipping %s/%s (already inserted)' % (package, version))
        return

    logging.debug('INSERT INTO ctags %s/%s...' % (package, version))
    ctags = []
    for tag in parse_ctags(ctagsfile):
        tag['package_id'] = package_id
        ctags.append(tag)
    if ctags:
        conn.execute(INSERT_CTAGS_Q, ctags)


is_ctags = lambda p: p.endswith(METADATA_SUFFIX)

def main(conf, ctagsfile=None):
    conn = create_engine(conf['db_uri']).connect()
    if ctagsfile:
        insert_ctags(conn, ctagsfile)
    else:
        for f in fs_storage.walk(conf['sources_dir'], test=is_ctags):
            with conn.begin() as trans:
                try:
                    insert_ctags(conn, f)
                except:
                    logging.exception('cannot inject %s' % f)
                    trans.rollback()


if __name__ == '__main__':
    cmdline = argparse.ArgumentParser(description='Debsources: bulk ctags insertion')
    cmdline.add_argument('--config', '-c', dest='conffile',
                         default=bininit.DEFAULT_CONFFILE,
                         help='alternate configuration file')
    cmdline.add_argument('file', nargs='?',
                         help='.ctags metadata file')
    args = cmdline.parse_args()
    conf = mainlib.load_configuration(args.conffile)

    mainlib.init_logging(conf, logging.ERROR)
    main(conf, ctagsfile=args.file)
