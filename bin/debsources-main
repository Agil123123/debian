#!/bin/bash

# Copyright (C) 2013-2021  The Debsources developers
# <qa-debsources@lists.alioth.debian.org>.
# See the AUTHORS file at the top-level directory of this distribution and at
# https://salsa.debian.org/qa/debsources/blob/master/AUTHORS
#
# This file is part of Debsources.
#
# Debsources is free software: you can redistribute it and/or modify it under
# the terms of the GNU Affero General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
# details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Driver for update runs, both synchronous (e.g. cmdline) and asynchronous
# (e.g. cron and pushes)

conffile=`python -c 'from debsources import mainlib; print(mainlib.guess_conffile())'`
if [ $? -ne 0 ]
then
    echo "Configuration file not found, aborting."
    exit 2
fi

# -----------------------------------------------------------------------

umask 0002
export LANG=C

# minimal interpolation support, for the few configuration values needed here
root_dir=$(grep "^root_dir:" "$conffile" | awk '{ print $2 }')
log_dir=$(grep "^log_dir:" "$conffile" | awk '{ print $2 }')

conf_get () {
    local key="$1"
    local value=$(grep "^${key}:" "$conffile" | head -n 1 | awk '{ print $2 }')
    value=$(echo $value | sed "s|%(root_dir)s|${root_dir}|")
    value=$(echo $value | sed "s|%(log_dir)s|${log_dir}|")
    if [ -z "$value" ] ; then
	err "required configuration value $key not found in $conffile, abort."
    fi
    echo "$value"
}

bin_dir=$( conf_get "bin_dir" )
cache_dir=$( conf_get "cache_dir" )
logfile=$( conf_get "log_file" )

disabler="${root_dir}/UPDATE-DISABLED"
lockfile="${root_dir}/ONGOING-UPDATE.pid"

# uses $logfile global
source "${bin_dir}/lib.sh"

main () {
    info "starting at $(date)"
    if [ -f "$disabler" ] ; then
	info "updates disabled by ${disabler}: skipping update run.\n"
	exit 2
    fi
    if [ -f "$lockfile" ] ; then
	pid=$(head "$lockfile")
	if ! ps "$pid" > /dev/null ; then
	    info "remove stale lockfile for pid '$pid'"
	    rm -f "$lockfile"
	else
	    err "lockfile found. Abort" 2
	fi
    fi
    echo $$ > "$lockfile"

    if [ "$1" == "with-debmirror" ]; then
        info "update source mirror..."
        ${bin_dir}/debsources-debian-source-mirror "$conffile" >> $logfile 2>&1
    fi

    info "debsources-update..."
    # note: debsources-update does his own logging to $logfile
    ${bin_dir}/debsources-update

    rm -f "$lockfile"
    info "all done at $(date)\n"
}

case "$1" in
    disable)
	echo -e "Updates are currently disabled.\nUse '${bin_dir}/debsources-main enable' to enable." > "$disabler"
	echo "Updates are now disabled."
	;;
    enable)
	rm -f "$disabler"
	echo "Updates are now enabled."
	;;
    update)
	main "with-debmirror"
	;;
    update-without-debmirror)
        main "without-debmirror"
        ;;
    *)
	echo "Usage: debsources-main { update | update-without-debmirror | enable | disable }"
	;;
esac
