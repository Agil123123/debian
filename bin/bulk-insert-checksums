#!/usr/bin/python

import logging
import mainlib
import os
import sys

from sqlalchemy import create_engine, bindparam, Integer, LargeBinary, String
from sqlalchemy.sql import text as sql_query

import fs_storage
from hook_checksums import parse_checksums


TYPEMAP = {
    'version_id': Integer,
    'path':       LargeBinary,
    'sha256':     String,
}

BINDPARAMS = [
    bindparam('path', type_=LargeBinary),
]

VERSION_ID_Q = sql_query("""
    SELECT versions.id
    FROM versions, packages
    WHERE versions.package_id = packages.id
    AND versions.vnumber = :v
    AND packages.name = :p
    """,
    typemap = TYPEMAP)

INSERT_SHA_Q = sql_query("""
    INSERT INTO checksums (version_id, path, sha256)
    VALUES (:version_id, :path, :sha256)
    """,
    typemap = TYPEMAP,
    bindparams = BINDPARAMS)

def insert_checksums(conn, sumsfile):
    steps = sumsfile.split('/')
    package = steps[-2]
    version = steps[-1][:-10]

    logging.debug('package %s/%s' % (package, version))
    logging.debug('INSERT INTO checksums...')

    version_id = conn.execute(VERSION_ID_Q, v=version, p=package).first()[0]
    checksums = []
    for (sha256, path) in parse_checksums(sumsfile):
        checksums.append({ 'version_id': version_id,
                           'path': path,
                           'sha256': sha256 })
    conn.execute(INSERT_SHA_Q, checksums)


is_checksum = lambda p: p.endswith('.checksums')

def main(conf, sumsfile=None):
    conn = create_engine(conf['db_uri'])
    if sumsfile:
        insert_checksums(conn, sumsfile)
    else:
        for f in fs_storage.walk(conf['sources_dir'], test=is_checksum):
            insert_checksums(conn, f)


if __name__ == '__main__':
    conf = mainlib.load_configuration()
    mainlib.init_logging(conf, logging.ERROR)
    sumsfile = None
    if len(sys.argv) >= 2:
        sumsfile = sys.argv[1]
    main(conf, sumsfile)
