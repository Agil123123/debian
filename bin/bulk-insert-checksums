#!/usr/bin/python

import argparse
import logging
import mainlib
import os
import sys

from sqlalchemy import create_engine, bindparam, Integer, LargeBinary, String
from sqlalchemy.sql import text as sql_query

import fs_storage
from plugins.hook_checksums import parse_checksums

METADATA_SUFFIX = '.checksums'
METADATA_SUFFIX_LEN = len(METADATA_SUFFIX)

BINDPARAMS = [
    bindparam('path', type_=LargeBinary),
]

VERSION_ID_Q = sql_query("""
    SELECT versions.id
    FROM versions, packages
    WHERE versions.package_id = packages.id
    AND versions.vnumber = :v
    AND packages.name = :p
    """)

INSERT_SHA_Q = sql_query("""
    INSERT INTO checksums (version_id, path, sha256)
    VALUES (:version_id, :path, :sha256)
    """,
    bindparams = BINDPARAMS)

def insert_checksums(conn, sumsfile):
    steps = sumsfile.split('/')
    package = steps[-2]
    version = steps[-1][:-METADATA_SUFFIX_LEN]

    logging.debug('package %s/%s' % (package, version))
    logging.debug('INSERT INTO checksums %s/%s...' % (package, version))

    version_id = conn.execute(VERSION_ID_Q, v=version, p=package).first()[0]
    checksums = []
    for (sha256, path) in parse_checksums(sumsfile):
        checksums.append({ 'version_id': version_id,
                           'path': path,
                           'sha256': sha256 })
    conn.execute(INSERT_SHA_Q, checksums)


is_checksum = lambda p: p.endswith(METADATA_SUFFIX)

def main(conf, sumsfile=None):
    conn = create_engine(conf['db_uri'])
    if sumsfile:
        insert_checksums(conn, sumsfile)
    else:
        for f in fs_storage.walk(conf['sources_dir'], test=is_checksum):
            with conn.begin() as trans:
                try:
                    insert_checksums(conn, f)
                except:
                    logging.exception('cannot inject %s' % f)
                    trans.rollback()


if __name__ == '__main__':
    cmdline = argparse.ArgumentParser(description='Debsources: bulk checksum insertion')
    cmdline.add_argument('--config', '-c', dest='conffile',
                         help='alternate configuration file')
    cmdline.add_argument('file', help='.checksum metadata file')
    args = cmdline.parse_args()
    conf = mainlib.load_configuration(args.conffile)

    mainlib.init_logging(conf, logging.ERROR)
    main(conf, sumsfile=args.file)
