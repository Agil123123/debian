#!/usr/bin/env python

# Copyright (C) 2014-2015  The Debsources developers <info@sources.debian.net>.
# See the AUTHORS file at the top-level directory of this distribution and at
# https://anonscm.debian.org/gitweb/?p=qa/debsources.git;a=blob;f=AUTHORS;hb=HEAD
#
# This file is part of Debsources. Debsources is free software: you can
# redistribute it and/or modify it under the terms of the GNU Affero General
# Public License as published by the Free Software Foundation, either version 3
# of the License, or (at your option) any later version.  For more information
# see the COPYING file at the top-level directory of this distribution and at
# https://anonscm.debian.org/gitweb/?p=qa/debsources.git;a=blob;f=COPYING;hb=HEAD

from __future__ import absolute_import

import argparse
import logging

from sqlalchemy import create_engine, bindparam, LargeBinary
from sqlalchemy.sql import text as sql_query

from debsources import mainlib
from debsources import fs_storage
from debsources.plugins.hook_checksums import parse_checksums

METADATA_SUFFIX = '.checksums'
METADATA_SUFFIX_LEN = len(METADATA_SUFFIX)

BINDPARAMS = [
    bindparam('path', type_=LargeBinary),
]

PACKAGE_ID_Q = sql_query("""
    SELECT versions.id
    FROM versions, packages
    WHERE versions.package_id = packages.id
    AND versions.version = :v
    AND packages.name = :p
    """)

CHECKSUMS_EXIST_Q = sql_query("""
    SELECT 1
    FROM checksums
    WHERE package_id = :v
    LIMIT 1
    """)

INSERT_SHA_Q = sql_query("""
    INSERT INTO checksums (package_id, path, sha256)
    VALUES (:package_id, :path, :sha256)
    """,
                         bindparams=BINDPARAMS)


def insert_checksums(conn, sumsfile):
    steps = sumsfile.split('/')
    package = steps[-2]
    version = steps[-1][:-METADATA_SUFFIX_LEN]

    logging.debug('package %s/%s' % (package, version))
    logging.debug('INSERT INTO checksums %s/%s...' % (package, version))

    package_id = conn.execute(PACKAGE_ID_Q, v=version, p=package).first()[0]
    assert package_id is not None
    has_checksums = conn.execute(CHECKSUMS_EXIST_Q, v=package_id).first()
    if has_checksums:
        return

    checksums = []
    for (sha256, path) in parse_checksums(sumsfile):
        checksums.append({'package_id': package_id,
                          'path': path,
                          'sha256': sha256})
    if checksums:
        conn.execute(INSERT_SHA_Q, checksums)


is_checksum = lambda p: p.endswith(METADATA_SUFFIX)


def main(conf, sumsfile=None):
    conn = create_engine(conf['db_uri'])
    if sumsfile:
        insert_checksums(conn, sumsfile)
    else:
        for f in fs_storage.walk(conf['sources_dir'], test=is_checksum):
            with conn.begin() as trans:
                try:
                    insert_checksums(conn, f)
                except:
                    logging.exception('cannot inject %s' % f)
                    trans.rollback()


if __name__ == '__main__':
    cmdline = argparse.ArgumentParser(
        description='Debsources: bulk checksum insertion')
    cmdline.add_argument('--config', '-c', dest='conffile',
                         default=mainlib.guess_conffile(),
                         help='alternate configuration file')
    cmdline.add_argument('file', nargs='?',
                         help='.checksum metadata file')
    args = cmdline.parse_args()
    conf = mainlib.load_configuration(args.conffile)

    mainlib.init_logging(conf, logging.ERROR)
    main(conf, sumsfile=args.file)
